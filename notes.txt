					*** Blocks and Scope ***

We’ve seen blocks used before in functions and if statements. A block is the code found inside a 
set of curly braces {}. Blocks help us group one or more statements together and serve as an important 
structural marker for our code.
A block of code could be a function, like this:
const logSkyColor = () => {
  let color = 'blue'; 
  console.log(color); // blue 
};
Notice that the function body is actually a block of code.
Observe the block in an if statement:
if (dusk) {
  let color = 'pink';
  console.log(color); // pink
};
	
					*** Global Scope ***

Scope is the context in which our variables are declared. We think about scope in relation to 
blocks because variables can exist either outside of or within these blocks.
In global scope, variables are declared outside of blocks. These variables are called global 
variables. Because global variables are not bound inside a block, they can be accessed by any code in the program, 
including code in blocks.
Let’s take a look at an example of global scope:
const color = 'blue'
const returnSkyColor = () => {
  return color; // blue 
};
console.log(returnSkyColor()); // blue
Even though the color variable is defined outside of the block, it can be accessed in the function block, 
giving it global scope.
In turn, color can be accessed within the returnSkyColor function block.

					*** Scope Pollution ***

It may seem like a great idea to always make your variables accessible, but having too many global variables 
can cause problems in a program.
When you declare global variables, they go to the global namespace. The global namespace allows the variables 
to be accessible from anywhere in the program. These variables remain there until the program finishes which 
means our global namespace can fill up really quickly.
Scope pollution is when we have too many global variables that exist in the global namespace, or when we reuse 
variables across different scopes. Scope pollution makes it difficult to keep track of our different variables 
and sets us up for potential accidents. For example, globally scoped variables can collide with other variables 
that are more locally scoped, causing unexpected behavior in our code.
Let’s look at an example of scope pollution in practice so we know how to avoid it:
	let num = 50;
	const logNum = () => {
  	num = 100; // Take note of this line of code
  	console.log(num);
	};

	logNum(); // Prints 100
	console.log(num); // Prints 100
You’ll notice:
We have a variable num.
Inside the function body of logNum(), we want to declare a new variable but forgot to use the let keyword.
When we call logNum(), num gets reassigned to 100.
The reassignment inside logNum() affects the global variable num.
Even though the reassignment is allowed and we won’t get an error, if we decided to use num later, we’ll 
unknowingly use the new value of num.
While it’s important to know what global scope is, it’s best practice to not define variables in the global scope.

===================================================================================================================
Scope is the idea in programming that some variables are accessible/inaccessible from other parts of the program.
Blocks are statements that exist within curly braces {}.
Global scope refers to the context within which variables are accessible to every part of the program.
Global variables are variables that exist within global scope.
Block scope refers to the context within which variables that are accessible only within the block they are defined.
Local variables are variables that exist within block scope.
Global namespace is the space in our code that contains globally scoped information.
Scope pollution is when too many variables exist in a namespace or variable names are reused.
====================================================================================================================

						*** Loops ***
A loop is a programming tool that repeats a set of instructions until a specified condition, 
called a stopping condition is reached. As a programmer, you’ll find that you rely on loops all the 
time! You’ll hear the generic term iterate when referring to loops; iterate simply means “to repeat”.
When we need to reuse a task in our code, we often bundle that action in a function. Similarly, when 
we see that a process has to repeat multiple times in a row, we write a loop. Loops allow us to create 
efficient code that automates processes to make scalable, manageable programs. When the condition is met, 
the loop stops and the computer moves on to the next part of the program.